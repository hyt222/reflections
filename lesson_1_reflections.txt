How did viewing a diff between two versions of a file help you see the bug that
was introduced?
查看文件的两个版本之间的差异如何帮助你了解引入的错误？

    通过比对代码的不同与修改
    很方便找出自己修改的地方，从而找到错误
    而且不会看着很晕，标记也很明显

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?
从长远来看，能轻松访问文件的整个历史记录将如何提高编程者的效率？

    可以查看自己编写程序的过程和进度
    如果需要回退到某一版本，可以很快速的查找到
    也可以根据进度查看自己的效率
    方便复盘总结

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?
你认为，手动选择何时创建提交（像在 Git 中做的那样）与自动保存版本（如 Google Docs 所做的那样）各有何优缺点？

    手动选择：可以保存自己想要保存的版本，方便了解每一次的修改
    自动保存版本：可以找回任意修改的版本，防止忘记保存带来的麻烦


Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?
为何你认为一些版本控制系统（例如 Git）允许在一次提交中保存多个文件，而其他系统（例如 Google Docs）单独对待每个文件？


	为了代码简洁通常会运用多个文件存放代码，而代码之间联系紧密
    其他系统针对的是非程序员用户，保存正在使用的单个文件，彼此之间独立

How can you use the commands git log and git diff to view the history of files?
如何使用命令 git log 和 git diff 来查看文件的历史记录？

    git log 查看 commit 的历史记录，从上到下为最近提交与之前提交的记录，也就是修改代码的记录
    git diff 查看两次 commit 之间的不同之处，也就是两次修改的增删详细细节

How might using version control make you more confident to make changes that
could break something?
使用版本控制，如何让你更有信心进行有可能会造成破坏的更改？

    因为可以回退到任意版本，对于出现的错误可以及时发现并且比对之前的版本进行修改
    觉得很棒，特别是缩小代码错误范围的时候，记忆加上 git 是一个发现错误的完美方案
    不需要一行行检查代码了

    即使修改会造成破坏也可以放心修改，因为有 git checkout 帮助我回退到没有错误的版本
    可以进行大胆尝试

Now that you have your workspace set up, what do you want to try using Git for?
现在你已设置了工作空间，你想尝试使用 Git 来做些什么？

    想要马上写代码让 git 起作用